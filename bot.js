import TelegramBot from 'node-telegram-bot-api';
import cron from 'node-cron';
import fs from 'fs';
import path from 'path';
import 'dotenv/config';
import axios from 'axios';

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const token = process.env.TELEGRAM_BOT_TOKEN;
const chatId = process.env.TELEGRAM_CHAT_ID;
const freepikApiKey = process.env.FREEPIK_API_KEY;

if (!token) {
    console.error('‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω');
    process.exit(1);
}
if (!chatId) {
    console.error('‚ùå –û—à–∏–±–∫–∞: TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω');
    console.log('‚ÑπÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ Telegram, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å chatId');
    process.exit(1);
}
if (!freepikApiKey) {
    console.error('‚ùå –û—à–∏–±–∫–∞: FREEPIK_API_KEY –Ω–µ –∑–∞–¥–∞–Ω');
    process.exit(1);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –±–µ–∑ polling
const bot = new TelegramBot(token, { polling: false });

// –ó–∞–≥—Ä—É–∂–∞–µ–º principles.json
let principles;
function loadPrinciples() {
    try {
        const data = fs.readFileSync(path.resolve('principles.json'), 'utf-8');
        principles = JSON.parse(data).principles || ['–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'];
        console.log('üü¢ principles.json –∑–∞–≥—Ä—É–∂–µ–Ω:');
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ principles.json:', err.message);
        principles = ['–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—ã'];
    }
}
loadPrinciples();

// –ó–∞–≥—Ä—É–∂–∞–µ–º images.json
let imageData;
function loadImageData() {
    try {
        const data = fs.readFileSync(path.resolve('images.json'), 'utf-8');
        imageData = JSON.parse(data);
        console.log('üü¢ images.json –∑–∞–≥—Ä—É–∂–µ–Ω:');
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ images.json:', err.message);
        imageData = {
            fragments: [
                { subject: "A lone hero", action: "stands tall", setting: "on a cliff" }
            ],
            styles: ['fantasy']
        };
    }
}
loadImageData();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function getRandomElements(arr, count) {
    const shuffled = arr.slice().sort(() => Math.random() - 0.5);
    return shuffled.slice(0, Math.min(count, arr.length));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
function createRandomPrompt(fragments) {
    const randomSubject = getRandomElements(fragments, 1)[0].subject;
    const randomAction = getRandomElements(fragments, 1)[0].action;
    const randomSetting = getRandomElements(fragments, 1)[0].setting;
    return `${randomSubject} ${randomAction} ${randomSetting}, vibrant colors, uplifting mood, cinematic lighting, epic composition`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Freepik API
async function initiateImageGeneration(prompt, style) {
    try {
        /*const epStyle = [
            "realism",
            "fantasy",
            "cinematic",
            "surrealism",
            "epic"
        ][Math.floor(Math.random() * 5)];
        */

        const response = await axios.post(
            'https://api.freepik.com/v1/ai/text-to-image/imagen3',
            {
                prompt: prompt,
                /*prompt: `${prompt}, ${epStyle} aesthetic`,*/
                num_images: 1,
                aspect_ratio: 'square_1_1',
                styling: {
                    style: style,
                    effects: {
                        color: 'vibrant',
                        lightning: 'cinematic',
                        framing: 'cinematic'
                    }
                },
                person_generation: 'allow_all',
                safety_settings: 'block_none'
            },
            {
                headers: {
                    'x-freepik-api-key': freepikApiKey,
                    'Content-Type': 'application/json'
                }
            }
        );
        const taskId = response.data.data.task_id;
        console.log('üü¢ –ó–∞–¥–∞—á–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∞, task_id:', taskId);
        return taskId;
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', err.message);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async function checkImageStatus(taskId) {
    try {
        console.log(freepikApiKey)
        const response = await axios.get(
            `https://api.freepik.com/v1/ai/text-to-image/imagen3/${taskId}`,
            {
                headers: {
                    'x-freepik-api-key': freepikApiKey
                }
            }
        );
        const status = response.data.data.status;
        const generated = response.data.data.generated;
        console.log('üü¢ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏:', status);
        if (status === 'COMPLETED' && generated.length > 0) {
            const imageUrl = generated[0];
            console.log('üü¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ:', imageUrl);
            return imageUrl;
        }
        return null;
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏:', err.message);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º
async function generateMotivationalImage(prompt, style) {
    const taskId = await initiateImageGeneration(prompt, style);
    // await new Promise(resolve => setTimeout(resolve, 2000)); // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥

    if (!taskId) return null;

    // –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–º–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥)
    let attempts = 0;
    const maxAttempts = 6; // 6 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ 5 —Å–µ–∫—É–Ω–¥ = 30 —Å–µ–∫—É–Ω–¥
    while (attempts < maxAttempts) {
        const imageUrl = await checkImageStatus(taskId);
        if (imageUrl) return imageUrl;
        console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø–æ–ø—ã—Ç–∫–∞', attempts + 1);
        await new Promise(resolve => setTimeout(resolve, 5000)); // –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥
        attempts++;
    }
    console.error('‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ –¥–ª—è:', prompt);
    return null;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ —Å–ø–∏—Å–∫–æ–º –∏ 4 –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9 —É—Ç—Ä–∞
cron.schedule('0 5 * * *', async () => {
    loadPrinciples(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º principles.json
    loadImageData(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º images.json
    const selectedPrinciples = getRandomElements(principles, 10);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–Ω—Ü–∏–ø—ã —Å–ø–∏—Å–∫–æ–º
    const principlesText = '‚úÖ –í–∞—à–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n' +
        selectedPrinciples.map((p, i) => `${i + 1}. ${p}`).join('\n');
    try {
        await bot.sendMessage(chatId, principlesText);
        console.log('üü¢ –ü—Ä–∏–Ω—Ü–∏–ø—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã');
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤:', err.message);
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º 4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    console.log('üü¢ –û—Ç–ø—Ä–∞–≤–∫–∞ 4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ 9:00');
    console.log("selectedPrinciples",selectedPrinciples)
    for (let i = 0; i < 4; i++) {
        const prompt = createRandomPrompt(imageData.fragments); // –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        const style = getRandomElements(imageData.styles, 1)[0]; // –°–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏–ª—å
        const principle = getRandomElements(selectedPrinciples, 1)[0];
        const imageUrl = await generateMotivationalImage(prompt, style);
        if (imageUrl) {
            try {
                await bot.sendPhoto(chatId, imageUrl, {
                    caption: `‚úÖ ${principle}`
                });
                console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${prompt} (—Å—Ç–∏–ª—å: ${style}) —Å —Ç–µ–∫—Å—Ç–æ–º: ${principle}`);
            } catch (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', err.message);
            }
        }
    }
});

console.log('üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');